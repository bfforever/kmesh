/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: api/filter/tcp_proxy.proto */

#ifndef PROTOBUF_C_api_2ffilter_2ftcp_5fproxy_2eproto__INCLUDED
#define PROTOBUF_C_api_2ffilter_2ftcp_5fproxy_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct Filter__TcpProxy Filter__TcpProxy;
typedef struct Filter__TcpProxy__WeightedCluster Filter__TcpProxy__WeightedCluster;
typedef struct Filter__TcpProxy__WeightedCluster__ClusterWeight Filter__TcpProxy__WeightedCluster__ClusterWeight;


/* --- enums --- */


/* --- messages --- */

struct  Filter__TcpProxy__WeightedCluster__ClusterWeight
{
  ProtobufCMessage base;
  /*
   * cluster name
   */
  char *name;
  /*
   * the choice of an cluster is determined by its weight
   */
  uint32_t weight;
};
#define FILTER__TCP_PROXY__WEIGHTED_CLUSTER__CLUSTER_WEIGHT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&filter__tcp_proxy__weighted_cluster__cluster_weight__descriptor) \
    , (char *)protobuf_c_empty_string, 0 }


/*
 * cluster based on weights.
 */
struct  Filter__TcpProxy__WeightedCluster
{
  ProtobufCMessage base;
  /*
   * Specifies one or more upstream clusters.
   */
  size_t n_clusters;
  Filter__TcpProxy__WeightedCluster__ClusterWeight **clusters;
};
#define FILTER__TCP_PROXY__WEIGHTED_CLUSTER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&filter__tcp_proxy__weighted_cluster__descriptor) \
    , 0,NULL }


typedef enum {
  FILTER__TCP_PROXY__CLUSTER_SPECIFIER__NOT_SET = 0,
  FILTER__TCP_PROXY__CLUSTER_SPECIFIER_CLUSTER = 2,
  FILTER__TCP_PROXY__CLUSTER_SPECIFIER_WEIGHTED_CLUSTERS = 10
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FILTER__TCP_PROXY__CLUSTER_SPECIFIER__CASE)
} Filter__TcpProxy__ClusterSpecifierCase;

struct  Filter__TcpProxy
{
  ProtobufCMessage base;
  /*
   * The prefix to use when emitting :ref:`statistics
   */
  char *stat_prefix;
  uint32_t max_connect_attempts;
  Filter__TcpProxy__ClusterSpecifierCase cluster_specifier_case;
  union {
    /*
     *cluster name to connect to.
     */
    char *cluster;
    /*
     * Multiple upstream clusters can be specified for a given route. The
     * request is routed to one of the upstream clusters based on weights
     * assigned to each cluster.
     */
    Filter__TcpProxy__WeightedCluster *weighted_clusters;
  };
};
#define FILTER__TCP_PROXY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&filter__tcp_proxy__descriptor) \
    , (char *)protobuf_c_empty_string, 0, FILTER__TCP_PROXY__CLUSTER_SPECIFIER__NOT_SET, {0} }


/* Filter__TcpProxy__WeightedCluster__ClusterWeight methods */
void   filter__tcp_proxy__weighted_cluster__cluster_weight__init
                     (Filter__TcpProxy__WeightedCluster__ClusterWeight         *message);
/* Filter__TcpProxy__WeightedCluster methods */
void   filter__tcp_proxy__weighted_cluster__init
                     (Filter__TcpProxy__WeightedCluster         *message);
/* Filter__TcpProxy methods */
void   filter__tcp_proxy__init
                     (Filter__TcpProxy         *message);
size_t filter__tcp_proxy__get_packed_size
                     (const Filter__TcpProxy   *message);
size_t filter__tcp_proxy__pack
                     (const Filter__TcpProxy   *message,
                      uint8_t             *out);
size_t filter__tcp_proxy__pack_to_buffer
                     (const Filter__TcpProxy   *message,
                      ProtobufCBuffer     *buffer);
Filter__TcpProxy *
       filter__tcp_proxy__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   filter__tcp_proxy__free_unpacked
                     (Filter__TcpProxy *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Filter__TcpProxy__WeightedCluster__ClusterWeight_Closure)
                 (const Filter__TcpProxy__WeightedCluster__ClusterWeight *message,
                  void *closure_data);
typedef void (*Filter__TcpProxy__WeightedCluster_Closure)
                 (const Filter__TcpProxy__WeightedCluster *message,
                  void *closure_data);
typedef void (*Filter__TcpProxy_Closure)
                 (const Filter__TcpProxy *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor filter__tcp_proxy__descriptor;
extern const ProtobufCMessageDescriptor filter__tcp_proxy__weighted_cluster__descriptor;
extern const ProtobufCMessageDescriptor filter__tcp_proxy__weighted_cluster__cluster_weight__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_api_2ffilter_2ftcp_5fproxy_2eproto__INCLUDED */
